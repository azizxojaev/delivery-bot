import logging
import sqlite3 as sql
import requests
import datetime
import pytz

from states import UserStates, UserStates3
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from collections import Counter
from aiogram import Bot, Dispatcher, executor, types
from keyboards import *

BOT_TOKEN = "6145569761:AAFV2EacizdYIKLPLtc6AzVLMH4-IMQvbjw"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
con = sql.connect("database.db")
cur = con.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS locations(
            location TEXT,
            id INTEGER
)""")
cur.execute("""CREATE TABLE IF NOT EXISTS korzina(
            products TEXT,
            cost INTEGER,
            id INTEGER
)""")
cur.execute("""CREATE TABLE IF NOT EXISTS orders(
            order_id INTEGER,
            products TEXT,
            address TEXT,
            phone_number TEXT,
            price INTEGER,
            date TEXT,
            id INTEGER
)""")
cur.execute("""CREATE TABLE IF NOT EXISTS reviews(
            review TEXT,
            stars INTEGER,
            username TEXT
)""")
cur.execute("""CREATE TABLE IF NOT EXISTS info_for_order(
            products TEXT,
            adress TEXT,
            phone_number TEXT,
            price INTEGER,
            date TEXT,
            id INTEGER
)""")


# –ü—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å—Å–∞
def get_address(latitude, longitude):
    url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}"
    response = requests.get(url).json()
    address = response['display_name']
    return address


# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=["start"])
async def startBot_handler(message: types.Message):
    try:
        btn = await startBot_reply()
        await message.answer("*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–û—à–∏–±–∫–∞ {e}", reply_markup=btn)


# –ö–Ω–æ–ø–∫–∞ –ú–µ–Ω—é
@dp.message_handler(text="–ú–µ–Ω—é üçΩ")
async def menu_handler(message: types.Message):
    try:
        btn = await menu_inline()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)

# –ö–Ω–æ–ø–∫–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìû")
async def help_handler(message: types.Message):
    try:
        await message.answer("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @Wifenlof")
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)


# –ö–Ω–æ–ø–∫–∞ –û—Ç–∑—ã–≤—ã
@dp.message_handler(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è")
async def reviews_handler(message: types.Message):
    try:
        btn = await starsBack_reply()
        await message.answer("–û—Ç–∑—ã–≤:", reply_markup=btn)
        btn = await stars_inline()
        await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –≤—ã –±—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—Å?", reply_markup=btn)
        await UserStates3.star.set()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–≤–µ–∑–¥—É
@dp.callback_query_handler(text_contains="stars:", state=UserStates3.star)
async def stars_handler(call: types.CallbackQuery, state: FSMContext):
    try:
        star = int(call.data.split(":")[1])
        await state.update_data(star=star)
        await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤")
        await UserStates3.review.set()
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.message_handler(state=UserStates3.star, text="–ùa–∑a–¥ ‚¨ÖÔ∏è")
async def review_handler(message: types.Message, state: FSMContext):
    try:
        btn = await startBot_reply()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=btn)
        await state.finish()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.message_handler(state=UserStates3.review, text="–ùa–∑a–¥ ‚¨ÖÔ∏è")
async def review_handler(message: types.Message, state: FSMContext):
    try:
        btn = await startBot_reply()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=btn)
        await state.finish()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.message_handler(state=UserStates3.review)
async def review_handler(message: types.Message, state: FSMContext):
    try:
        await state.update_data(review=message.text)
        data = await state.get_data()
        username = message.from_user.username
        if username == None:
            username = message.from_user.id
        btn = await startBot_reply()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=btn)
        cur.execute("INSERT INTO reviews VALUES (?, ?, ?)", (data["review"], data["star"], username))
        con.commit()
        await state.finish()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)


# –ö–Ω–æ–ø–∫–∞ –ö–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí")
async def basket_handler(message: types.Message):
    try:
        global showProducts
        global sum
        global final_sum
        global allProducts
        cur.execute(f"DELETE FROM info_for_order WHERE id = {message.from_user.id}")
        con.commit()
        if cur.execute(f"SELECT products FROM korzina WHERE id = {message.from_user.id}").fetchone() != None:
            allProducts = []
            allCosts = []
            sum = 0
            showProducts = ""
            for i in cur.execute(f"SELECT products FROM korzina WHERE id = {message.from_user.id}").fetchall():
                allProducts.append(i[0])
            counter = Counter(allProducts)
            for value, count in counter.items():
                showProducts = showProducts + f"‚ñ™Ô∏è{value} {count}x\n"
            for i in cur.execute(f"SELECT cost FROM korzina WHERE id = {message.from_user.id}").fetchall():
                allCosts.append(int(i[0]))
            for i in range(len(allCosts)):
                sum = sum + allCosts[i]
            final_sum = sum + 10000
            final_sum = str(final_sum)
            final_sum = final_sum[:-3]
            sum = str(sum)
            sum = sum[:-3]
            btn = await basket_inline()
            await message.answer(f"*–í –∫–æ—Ä–∑–∏–Ω–µ:*\n\n_{showProducts}_\n*–¢–æ–≤–∞—Ä—ã:* `{sum} 000 —Å—É–º`\n*–î–æ—Å—Ç–∞–≤–∫–∞:* `10 000 —Å—É–º`\n*–ò—Ç–æ–≥–æ:* `{final_sum} 000`", reply_markup=btn)
            sumForDB = int(final_sum) * 1000
            cur.execute("INSERT INTO info_for_order VALUES (?, ?, ?, ?, ?, ?)", (str(allProducts), None, None, sumForDB, None, message.from_user.id))
            con.commit()
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query_handler(text_contains="order:")
async def myorders_handler(call: types.CallbackQuery):
    try:
        call_id = call.data.split(":")[1]
        allData = cur.execute(f"SELECT * FROM orders WHERE order_id = {call_id}").fetchone()
        orderId = allData[0]
        all_products = str(allData[1])
        all_products = all_products.split(",")
        for i in range(len(all_products)):
            all_products[i] = all_products[i].lstrip()
        result = ""
        for i in range(len(all_products)):
            result = result + f"‚ñ™Ô∏è {all_products[i]}\n"
        result = result.replace("'", "")
        result = result.replace("[", "")
        result = result.replace("]", "")
        adress_result = allData[2]
        phoneNumber_result = allData[3]
        price_result = str(allData[4])[:-3]
        date_result = allData[5]
        btn = await back_inline()
        await call.message.edit_text(f"*–ó–∞–∫–∞–∑ ‚Ññ {orderId}:*\n\n_{result}_\n*–ê–¥—Ä–µ—Å: *`{adress_result}`\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* `{phoneNumber_result}`\n*–¶–µ–Ω–∞:* `{price_result} 000`\n*–î–∞—Ç–∞:* `{date_result}`", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º
@dp.callback_query_handler(text="backToOrders")
async def backToOrders_handler(call: types.CallbackQuery):
    try:
        orders = cur.execute(f"SELECT * FROM orders WHERE id = {call.from_user.id}").fetchall()
        idList = []
        for i in range(len(orders)):
            idList.append(orders[i][0])
        btn = await orders_inline(idList)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –∑–∞–∫–∞–∑—ã
@dp.message_handler(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõç")
async def myorders_handler(message: types.Message):
    try:
        if cur.execute(f"SELECT * FROM orders WHERE id = {message.from_user.id}").fetchone() != None:
            orders = cur.execute(f"SELECT * FROM orders WHERE id = {message.from_user.id}").fetchall()
            idList = []
            for i in range(len(orders)):
                idList.append(orders[i][0])
            btn = await orders_inline(idList)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=btn)
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏!")
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)


# –¢–æ–≤–∞—Ä—ã
@dp.callback_query_handler(text="back")
async def back_products(call: types.CallbackQuery):
    try:
        btn = await menu_inline()
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.callback_query_handler(text_contains="bac:")
async def back_products(call: types.CallbackQuery):
    try:
        msg = call.data.split(":")[1]
        await call.message.delete()
        btn = await product_inline(msg)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ú–µ–Ω—é
@dp.callback_query_handler(text_contains="c:")
async def menu_product1(call: types.CallbackQuery):
    try:
        global category
        msg = call.data.split(":")[1]
        category = msg
        btn = await product_inline(msg)
        await call.message.delete()
        await call.message.answer_photo(types.InputFile(f"main_images/{msg}.jpg"), caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(text_contains="p:")
async def check_product(call: types.CallbackQuery):
    try:
        global num
        global product
        global cost
        num = 1
        msg = call.data.split(":")[1]
        if True:
            if msg == "1":
                product = "–õ–∞–≤–∞—à —Å –∫—É—Ä–∏—Ü–µ–π "
                cost = 26000
            elif msg == "2":
                product = "–õ–∞–≤–∞—à —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º "
                cost = 31000
            elif msg == "3":
                product = "–õ–∞–≤–∞—à –æ—Å—Ç—Ä—ã–π —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 28000
            elif msg == "4":
                product = "–õ–∞–≤–∞—à –æ—Å—Ç—Ä—ã–π —Å –∫—É—Ä–∏—Ü–µ–π "
                cost = 26000
            elif msg == "5":
                product = "–õ–∞–≤–∞—à —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å—ã—Ä–æ–º "
                cost = 29000
            elif msg == "6":
                product = "–§–∏—Ç—Ç–µ—Ä "
                cost = 24000
            elif msg == "7":
                product = "–¢—Ä–∏–Ω–¥–≤–∏—á —Å –∫—É—Ä–∏—Ü–µ–π "
                cost = 24000
            elif msg == "8":
                product = "–¢—Ä–∏–Ω–¥–≤–∏—á —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 26000
            elif msg == "9":
                product = "–®–∞—É—Ä–º–∞ –æ—Å—Ç—Ä–∞—è —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 26000
            elif msg == "10":
                product = "–®–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π "
                cost = 26000
            elif msg == "11":
                product = "–®–∞—É—Ä–º–∞ –æ—Å—Ç—Ä–∞—è c –∫—É—Ä–∏—Ü–µ–π "
                cost = 24000
            elif msg == "12":
                product = "–®–∞—É—Ä–º–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 26000
            elif msg == "13":
                product = "–ì–∞–º–±—É—Ä–≥–µ—Ä "
                cost = 22000
            elif msg == "14":
                product = "–ß–∏–∑–±—É—Ä–≥–µ—Ä "
                cost = 24000
            elif msg == "15":
                product = "–î–∞–±–ª–±—É—Ä–≥–µ—Ä "
                cost = 33000
            elif msg == "16":
                product = "–î–∞–±–ª—á–∏–∑–±—É—Ä–≥–µ—Ä "
                cost = 37000
            elif msg == "17":
                product = "–°–∞–± —Å –∫—É—Ä–∏—Ü–µ–π  "
                cost = 17000
            elif msg == "18":
                product = "–°–∞–± —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å—ã—Ä–æ–º "
                cost = 19000
            elif msg == "19":
                product = "–°–∞–± —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º "
                cost = 21000
            elif msg == "20":
                product = "–°–∞–± —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 19000
            elif msg == "21":
                product = "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏ "
                cost = 15000
            elif msg == "22":
                product = "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –§—Ä–∏ "
                cost = 14000
            elif msg == "23":
                product = "–•–æ—Ç-–¥–æ–≥ "
                cost = 14000
            elif msg == "24":
                product = "–î–∞–±–ª–•–æ—Ç-–¥–æ–≥ "
                cost = 21000
            elif msg == "25":
                product = "–•–æ—Ç-–¥–æ–≥ –¥–µ—Ç—Å–∫–∏–π "
                cost = 8000
            elif msg == "26":
                product = "–•–æ—Ç-–¥–æ–≥ –ú–∏–Ω–∏ "
                cost = 8000
            elif msg == "27":
                product = "–°–º–∞–π–ª–∏–∫–∏ "
                cost = 14000
            elif msg == "28":
                product = "–°—Ç—Ä–∏–ø—Å—ã "
                cost = 19000
            elif msg == "29":
                product = "–†–∏—Å "
                cost = 7000
            elif msg == "30":
                product = "–õ–µ–ø–µ—à–∫–∞ "
                cost = 3000
            elif msg == "31":
                product = "–°–∞–ª–∞—Ç "
                cost = 7000
            elif msg == "32":
                product = "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å "
                cost = 24000
            elif msg == "33":
                product = "–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π "
                cost = 22000
            elif msg == "34":
                product = "–ö–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π —Å–æ—É—Å 25 –º–ª "
                cost = 3000
            elif msg == "35":
                product = "–¢–æ–º–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø 25 –º–ª "
                cost = 3000
            elif msg == "36":
                product = "–ë–∞—Ä–±–µ–∫—é 25 –º–ª "
                cost = 3000
            elif msg == "37":
                product = "–ú–∞–π–æ–Ω–µ–∑–Ω–æ-—Å—ã—Ä–Ω—ã–π —Å–æ—É—Å 25 –º–ª "
                cost = 3000
            elif msg == "38":
                product = "–ö–æ–º–±–æ –ü–ª—é—Å "
                cost = 17000
            elif msg == "39":
                product = "–ö–æ–º–±–æ –ø–ª—é—Å –≥–æ—Ä—è—á–∏–π (–∑–µ–ª–µ–Ω—ã–π —á–∞–π) "
                cost = 17000
            elif msg == "40":
                product = "–î–æ–Ω–∞—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 43000
            elif msg == "41":
                product = "–§–∏—Ç–ö–æ–º–±–æ "
                cost = 31000
            elif msg == "42":
                product = "–î–æ–Ω–∞—Ä c –∫—É—Ä–∏—Ü–µ–π "
                cost = 41000
            elif msg == "43":
                product = "–ö–æ–º–±–æ –ø–ª—é—Å –≥–æ—Ä—è—á–∏–π (—á—ë—Ä–Ω—ã–π —á–∞–π) "
                cost = 17000
            elif msg == "44":
                product = "–î–µ—Ç—Å–∫–æ–µ –∫–æ–º–±–æ "
                cost = 17000
            elif msg == "45":
                product = "–î–æ–Ω–∞—Ä-–±–æ–∫—Å —Å –∫—É—Ä–∏—Ü–µ–π "
                cost = 34000
            elif msg == "46":
                product = "–î–æ–Ω–∞—Ä-–±–æ–∫—Å —Å –≥–æ–≤—è–¥–∏–Ω–æ–π "
                cost = 36000
            elif msg == "47":
                product = "–î–æ–Ω–∞—Ç –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–π "
                cost = 15000
            elif msg == "48":
                product = "–ú–µ–¥–æ–≤–∏–∫ "
                cost = 16000
            elif msg == "49":
                product = "–ß–∏–∑–∫–µ–π–∫ "
                cost = 16000
            elif msg == "50":
                product = "–î–æ–Ω–∞—Ç —è–≥–æ–¥–Ω—ã–π "
                cost = 15000
            elif msg == "51":
                product = "–ö–æ—Ñ–µ –ì–ª—è—Å–µ "
                cost = 13000
            elif msg == "52":
                product = "–ß–∞–π –∑–µ–ª–µ–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º "
                cost = 5000
            elif msg == "53":
                product = "–õ–∞—Ç—Ç–µ "
                cost = 13000
            elif msg == "54":
                product = "–ß–∞–π —á–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º "
                cost = 5000
            elif msg == "55":
                product = "–ß–∞–π —á–µ—Ä–Ω—ã–π "
                cost = 4000
            elif msg == "56":
                product = "–ß–∞–π –∑–µ–ª–µ–Ω—ã–π "
                cost = 4000
            elif msg == "57":
                product = "–ö–∞–ø—É—á–∏–Ω–æ "
                cost = 13000
            elif msg == "58":
                product = "–ê–º–µ—Ä–∏–∫–∞–Ω–æ "
                cost = 11000
            elif msg == "59":
                product = "–°–æ–∫ –Ø–±–ª–æ—á–Ω—ã–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞, 0,33–ª. "
                cost = 10000
            elif msg == "60":
                product = "–í–æ–¥–∞ –±–µ–∑ –≥–∞–∑–∞ 0,5–ª "
                cost = 4000
            elif msg == "61":
                product = "–°–æ–∫ –ë–ª–∏—Å—Å "
                cost = 16000
            elif msg == "62":
                product = "–ü–µ–ø—Å–∏, –±—É—Ç—ã–ª–∫–∞ 0,5–ª "
                cost = 9000
            elif msg == "63":
                product = "–ü–µ–ø—Å–∏, –±—É—Ç—ã–ª–∫–∞ 1,5–ª "
                cost = 17000
            elif msg == "64":
                product = "–ü–µ–ø—Å–∏, —Å—Ç–∞–∫–∞–Ω 0,4–ª "
                cost = 8000
            elif msg == "65":
                product = "–ú–æ—Ö–∏—Ç–æ "
                cost = 11000
            elif msg == "66":
                product = "–ü–∏–Ω–∞ –∫–æ–ª–∞–¥–∞ "
                cost = 11000
        btn = await howMuch_inline(num, category)
        await call.message.delete()
        await call.message.answer_photo(types.InputFile(f"products/p.{msg}.jpg"), caption=f"–°–∫–æ–ª—å–∫–æ {product}–∂–µ–ª–∞–µ—Ç–µ?\n–¶–µ–Ω–∞: {cost} —Å—É–º", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–≤—Ä–∞
@dp.callback_query_handler(text="+")
async def plus_product(call: types.CallbackQuery):
    try:
        global num
        num = num + 1
        btn = await howMuch_inline(num, category)
        await call.message.edit_reply_markup(btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –£–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
@dp.callback_query_handler(text="-")
async def minus_product(call: types.CallbackQuery):
    try:
        global num
        if num > 1:
            num = num - 1
            btn = await howMuch_inline(num, category)
            await call.message.edit_reply_markup(btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query_handler(text="add")
async def add_product(call: types.CallbackQuery):
    try:
        for i in range(num):
            cur.execute(f"INSERT INTO korzina VALUES (?, ?, ?)", (product, cost, call.from_user.id))
            con.commit()
        await call.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)


# –ö–æ—Ä–∑–∏–Ω–∞
@dp.callback_query_handler(text="clear")
async def clear_products(call: types.CallbackQuery):
    try:
        cur.execute(f"DELETE FROM korzina WHERE id = {call.from_user.id}")
        con.commit()
        await call.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.message_handler(text="–ù–∞–∑a–¥ ‚¨ÖÔ∏è", state=UserStates.contact)
async def back_products(message: types.Message, state: FSMContext):
    try:
        cur.execute(f"DELETE FROM info_for_order WHERE id = {message.from_user.id}")
        con.commit()
        await state.finish()
        btn = await startBot_reply()
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=btn)
        global showProducts
        global sum
        global final_sum
        global allProducts
        cur.execute(f"DELETE FROM info_for_order WHERE id = {message.from_user.id}")
        con.commit()
        if cur.execute(f"SELECT products FROM korzina WHERE id = {message.from_user.id}").fetchone() != None:
            allProducts = []
            allCosts = []
            sum = 0
            showProducts = ""
            for i in cur.execute(f"SELECT products FROM korzina WHERE id = {message.from_user.id}").fetchall():
                allProducts.append(i[0])
            counter = Counter(allProducts)
            for value, count in counter.items():
                showProducts = showProducts + f"‚ñ™Ô∏è{value} {count}x\n"
            for i in cur.execute(f"SELECT cost FROM korzina WHERE id = {message.from_user.id}").fetchall():
                allCosts.append(int(i[0]))
            for i in range(len(allCosts)):
                sum = sum + allCosts[i]
            final_sum = sum + 10000
            final_sum = str(final_sum)
            final_sum = final_sum[:-3]
            sum = str(sum)
            sum = sum[:-3]
            btn = await basket_inline()
            await message.answer(f"*–í –∫–æ—Ä–∑–∏–Ω–µ:*\n\n_{showProducts}_\n*–¢–æ–≤–∞—Ä—ã:* `{sum} 000 —Å—É–º`\n*–î–æ—Å—Ç–∞–≤–∫–∞:* `10 000 —Å—É–º`\n*–ò—Ç–æ–≥–æ:* `{final_sum} 000`", reply_markup=btn)
            sumForDB = int(final_sum) * 1000
            cur.execute("INSERT INTO info_for_order VALUES (?, ?, ?, ?, ?, ?)", (str(allProducts), None, None, sumForDB, None, message.from_user.id))
            con.commit()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.message_handler(text="–ùa–∑–∞–¥ ‚¨ÖÔ∏è", state=UserStates.location)
async def back_products(message: types.Message, state: FSMContext):
    try:
        btn = await order_reply()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 \*\* \*\*\* \*\* \*\*", reply_markup=btn)
        await UserStates.contact.set()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)

# –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.callback_query_handler(text="order")
async def clear_products(call: types.CallbackQuery):
    try:
        btn = await order_reply()
        await call.message.delete()
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 \*\* \*\*\* \*\* \*\*", reply_markup=btn)
        await UserStates.contact.set()
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
@dp.message_handler(content_types=["text", "contact"], state=UserStates.contact)
async def contact_sended(message: types.Message, state: FSMContext):
    try:
        global phoneNumber
        if message.content_type == "contact":
            phoneNumber = "+" + message.contact.phone_number
            cur.execute(f"UPDATE info_for_order SET phone_number = {phoneNumber} WHERE id = {message.from_user.id}")
            con.commit()
            btn = await adress_reply()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=btn)
            await state.finish()
            await UserStates.location.set()
        elif message.content_type == "text":
            if "+998" in message.text and len(message.text) == 17:
                phoneNumber = message.text
                cur.execute(f"UPDATE info_for_order SET phone_number = '{phoneNumber}' WHERE id = {message.from_user.id}")
                con.commit()
                btn = await adress_reply()
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=btn)
                await state.finish()
                await UserStates.location.set()
            else:
                await message.answer("–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(content_types=["location"], state=UserStates.location)
async def location_check(message: types.Message, state: FSMContext):
    try:
        global address
        latitude = message.location.latitude
        longitude = message.location.longitude
        address1 = get_address(latitude, longitude)
        address1 = str(address1)
        address1 = address1.split(", Toshkent")[0]
        address = ""
        for i in range(len(address1)):
            if address1[i] != "`":
                address = address + address1[i]
        btn = await adressCheck_reply()
        await message.answer(f"–í–∞—à –∞–¥—Ä–µ—Å: {address}?", reply_markup=btn)
        cur.execute(f"UPDATE info_for_order SET adress = '{address}' WHERE id = {message.from_user.id}")
        con.commit()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ üó∫", state=UserStates.location)
async def savedLocations_check(message: types.Message, state: FSMContext):
    try:
        if cur.execute(f"SELECT location FROM locations WHERE id = {message.from_user.id}").fetchone() != None:
            addresses = []
            for i in cur.execute(f"SELECT location FROM locations WHERE id = {message.from_user.id}").fetchall():
                addresses.append(i[0])
            btn = await chooseAddress_reply(addresses)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å", reply_markup=btn)
            await UserStates.location2.set()
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(text="–ù–µ—Ç ‚ùå", state=UserStates.location)
async def locationNo_check(message: types.Message, state: FSMContext):
    try:
        btn = await adress_reply()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.message_handler(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", state=UserStates.location)
async def locationBack2_check(message: types.Message, state: FSMContext):
    try:
        btn = await adress_reply()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.message_handler(text="–î–∞ ‚úÖ", state=UserStates.location)
async def locationYes_check(message: types.Message, state: FSMContext):
    try:
        await state.finish()
        if cur.execute(f"SELECT location FROM locations WHERE id = {message.from_user.id}").fetchone() == None:
            cur.execute("INSERT INTO locations VALUES (?, ?)", (address, message.from_user.id))
            con.commit()
        btn = await orderDone_reply()
        await message.answer(f"*–í–∞—à –∑–∞–∫–∞–∑:*\n\n*A–¥—Ä–µ—Å:* `{address}`\n\n_{showProducts}_\n*–¢–æ–≤–∞—Ä—ã:* `{sum} 000 —Å—É–º`\n*–î–æ—Å—Ç–∞–≤–∫–∞:* `10 000 —Å—É–º`\n*–ò—Ç–æ–≥–æ:* `{final_sum} 000`", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.message_handler(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", state=UserStates.location2)
async def locationBack_check(message: types.Message, state: FSMContext):
    try:
        btn = await adress_reply()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=btn)
        await UserStates.location.set()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –õ–æ–∫–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(state=UserStates.location2)
async def savedLocationsWait_check(message: types.Message, state: FSMContext):
    try:
        global address
        address = message.text
        if cur.execute(f"SELECT location FROM locations WHERE id = {message.from_user.id}").fetchone() == None:
            cur.execute("INSERT INTO locations VALUES (?, ?)", (address, message.from_user.id))
            con.commit()
        btn = await orderDone_reply()
        await message.answer(f"*–í–∞—à –∑–∞–∫–∞–∑:*\n\n*A–¥—Ä–µ—Å:* `{address}`\n\n_{showProducts}_\n*–¢–æ–≤–∞—Ä—ã:* `{sum} 000 —Å—É–º`\n*–î–æ—Å—Ç–∞–≤–∫–∞:* `10 000 —Å—É–º`\n*–ò—Ç–æ–≥–æ:* `{final_sum} 000`", reply_markup=btn)
        cur.execute(f"UPDATE info_for_order SET adress = '{address}' WHERE id = {message.from_user.id}")
        con.commit()
        await UserStates.state1.set()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message_handler(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", state=UserStates.state1)
async def locationDone_check(message: types.Message, state: FSMContext):
    try:
        await state.finish()
        tz = pytz.timezone('Asia/Tashkent')
        now_date = datetime.datetime.now(tz)
        date = now_date.strftime("%H:%M/%d.%m.%y")
        last_id = 1
        if cur.execute("SELECT order_id FROM orders").fetchone() != None:
            last_id = cur.execute("SELECT order_id FROM orders").fetchall()[-1][0] + 1
        cur.execute(f"UPDATE info_for_order SET date = '{date}' WHERE id = {message.from_user.id}")
        con.commit()
        data = cur.execute(f"SELECT * FROM info_for_order WHERE id = {message.from_user.id}").fetchone()
        cur.execute("INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?, ?)", (last_id, data[0], data[1], data[2], data[3], data[4], message.from_user.id))
        cur.execute(f"DELETE FROM korzina WHERE id = {message.from_user.id}")
        cur.execute(f"DELETE FROM info_for_order WHERE id = {message.from_user.id}")
        con.commit()
        btn = await startBot_reply()
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.message_handler(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", state=UserStates.state1)
async def back_products(message: types.Message, state: FSMContext):
    try:
        btn = await adress_reply()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=btn)
        await UserStates.location.set()
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)

# –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=["admin"])
async def admin(message: types.Message):
    try:
        if message.from_user.id == 735815568:
            btn = await admin_inline()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.callback_query_handler(text="view_review")
async def view_review(call: types.CallbackQuery):
    try:
        data = cur.execute("SELECT * FROM reviews").fetchall()
        result = ""
        for i in range(len(data)):
            result = result + f"*–û—Ç–∑—ã–≤:* `{data[i][0]}`, *–ó–≤–µ–∑–¥—ã:* `{data[i][1]}`, *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{data[i][2]}`.\n"
        btn = await adminBack_inline()
        await call.message.edit_text(result, reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.callback_query_handler(text="back_review")
async def back_review(call: types.CallbackQuery):
    try:
        btn = await admin_inline()
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)

@dp.callback_query_handler(text="view_orders")
async def view_orders(call: types.CallbackQuery):
    try:
        if cur.execute(f"SELECT * FROM orders").fetchone() != None:
            orders = cur.execute(f"SELECT * FROM orders").fetchall()
            idList = []
            for i in range(len(orders)):
                idList.append(orders[i][0])
            btn = await adminOrders_inline(idList)
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã:", reply_markup=btn)
        else:
            btn = await adminBack_inline()
            await call.message.edit_text("–ù–µ—Ç—É –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤!", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.callback_query_handler(text_contains="order2:")
async def myorders_handler(call: types.CallbackQuery):
    try:
        call_id = call.data.split(":")[1]
        allData = cur.execute(f"SELECT * FROM orders WHERE order_id = {call_id}").fetchone()
        orderId = allData[0]
        all_products = str(allData[1])
        all_products = all_products.split(",")
        for i in range(len(all_products)):
            all_products[i] = all_products[i].lstrip()
        result = ""
        for i in range(len(all_products)):
            result = result + f"‚ñ™Ô∏è {all_products[i]}\n"
        result = result.replace("'", "")
        result = result.replace("[", "")
        result = result.replace("]", "")
        adress_result = allData[2]
        phoneNumber_result = allData[3]
        price_result = str(allData[4])[:-3]
        date_result = allData[5]
        btn = await back2_inline()
        await call.message.edit_text(f"*–ó–∞–∫–∞–∑ ‚Ññ {orderId}:*\n\n_{result}_\n*–ê–¥—Ä–µ—Å: *`{adress_result}`\n*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* `{phoneNumber_result}`\n*–¶–µ–Ω–∞:* `{price_result} 000`\n*–î–∞—Ç–∞:* `{date_result}`", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.callback_query_handler(text="backToOrders2")
async def myordersBack_handler(call: types.CallbackQuery):
    try:
        orders = cur.execute(f"SELECT * FROM orders").fetchall()
        idList = []
        for i in range(len(orders)):
            idList.append(orders[i][0])
        btn = await adminOrders_inline(idList)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.callback_query_handler(text="delete_order")
async def myOrdersDelete_handler(call: types.CallbackQuery):
    try:
        order_id = call.message.text.split(" ‚Ññ ")[1]
        order_id = int(order_id.split(":")[0])
        cur.execute(f"DELETE FROM orders WHERE order_id = {order_id}")
        con.commit()
        orders = cur.execute(f"SELECT * FROM orders").fetchall()
        idList = []
        for i in range(len(orders)):
            idList.append(orders[i][0])
        btn = await adminOrders_inline(idList)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)
@dp.callback_query_handler(text="backToAdminMenu")
async def adminMenuBack_handler(call: types.CallbackQuery):
    try:
        if call.from_user.id == 735815568:
            btn = await admin_inline()
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=btn)
    except Exception as e:
        btn = await startBot_reply()
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=btn)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)